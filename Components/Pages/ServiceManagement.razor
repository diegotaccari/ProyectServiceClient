@page "/ServiceManagement"
@using System.Globalization
@using System.Net.Http
@using System.Net.Http.Json
@using ProyectServiceClient.Models
@using ProyectServiceClient.Components.Modals
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Gestión de Servicios</PageTitle>

<div class="container mt-4">
    <h2 class="mb-4">Gestión de Servicios</h2>

    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <strong>Error:</strong> @error
            <button type="button" class="btn-close" @onclick="() => error = null"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <strong>Éxito:</strong> @successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
        </div>
    }

    @if (loading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card mb-4">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <span>Filtros de búsqueda</span>
                <button class="btn btn-light" @onclick="OpenCreateModal">
                    <i class="bi bi-plus-circle"></i> Nuevo Servicio
                </button>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <select class="form-select" @bind="filterOption" @bind:event="onchange">
                            <option value="">Todos los campos</option>
                            <option value="nombre">Nombre</option>
                            <option value="apellido">Apellido</option>
                            <option value="equipo">Equipo</option>
                            <option value="telefono">Teléfono</option>
                        </select>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Buscar..." @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterServices" />
                            <button class="btn btn-outline-primary" type="button" @onclick="FilterServices">
                                <i class="bi bi-search"></i> Buscar
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if (!filteredServices.Any())
        {
            <div class="alert alert-info">
                No se encontraron servicios. Intente con otros criterios de búsqueda o cree un nuevo servicio.
            </div>
        }
        else
        {
            <Grid TItem="Service" Class="table table-hover table-bordered table-striped" DataProvider="ServicesDataProvider">
                <GridColumns>
                    <GridColumn TItem="Service" HeaderText="#" HeaderTextAlignment="Alignment.Center">
                        @context.Id
                    </GridColumn>
                    <GridColumn TItem="Service" HeaderText="Nombre">
                        @context.Nombre
                    </GridColumn>
                    <GridColumn TItem="Service" HeaderText="Apellido">
                        @context.Apellido
                    </GridColumn>
                    <GridColumn TItem="Service" HeaderText="Equipo">
                        @context.Equipo
                    </GridColumn>
                    <GridColumn TItem="Service" HeaderText="Diagnóstico">
                        @context.Diagnostico
                    </GridColumn>
                    <GridColumn TItem="Service" HeaderText="Teléfono">
                        @context.Telefono
                    </GridColumn>
                    <GridColumn TItem="Service" HeaderText="Valor" HeaderTextAlignment="Alignment.End">
                        @context.Valor.ToString("C", CultureInfo.CurrentCulture)
                    </GridColumn>
                    <GridColumn TItem="Service" HeaderText="Seña" HeaderTextAlignment="Alignment.End">
                        @context.Seña.ToString("C", CultureInfo.CurrentCulture)
                    </GridColumn>
                    <GridColumn TItem="Service" HeaderText="Fecha" HeaderTextAlignment="Alignment.Center">
                        @context.FechaIngreso.ToString("dd/MM/yyyy")
                    </GridColumn>
                    <GridColumn TItem="Service" HeaderText="Acciones" HeaderTextAlignment="Alignment.Center">
                                    <div class="btn-group" role="group">
                            <button class="btn btn-sm btn-primary" @onclick="() => OpenEditModal(context)"><i class="bi bi-pencil"></i> Editar</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteConfirm(context)"><i class="bi bi-trash"></i> Eliminar</button>
                                    </div>
                    </GridColumn>
                </GridColumns>
            </Grid>
        }
    }
</div>
<ServiceCreateEdit @ref="serviceCreateEditModal" OnSave="SaveService" OnClose="CloseCreateEditModal" />
<ServiceDelete @ref="serviceDeleteModal" Service="serviceToDelete" OnConfirm="ConfirmDelete" OnCancel="CloseDeleteModal" />
@code {
 
    // Propiedades para la lista de servicios
    private List<Service> Services { get; set; } = new();
    private List<Service> filteredServices { get; set; } = new();
    private string? error;
    private bool loading = true;
    private string? successMessage;
    // Referencias a los componentes modales
    private ServiceCreateEdit? serviceCreateEditModal;
    private ServiceDelete? serviceDeleteModal;
    // Propiedades para búsqueda y filtrado
    private string searchTerm = "";
    private string filterOption = "";
    
    // Propiedades para paginación
    private class PaginationState
    {
        public int CurrentPage { get; set; } = 1;
        public int PageSize { get; set; } = 5;
        public int TotalItems { get; set; }
        public int TotalPages => (int)Math.Ceiling(TotalItems / (double)PageSize);
        
        public bool CanNavigateToPage(int page) => page >= 1 && page <= TotalPages;
    }
    
    private PaginationState _paginationState = new();
    
    // Servicio para eliminar
    private Service? serviceToDelete;

    private async Task ConfirmDelete()
    {
        try
        {
            if (serviceToDelete == null)
            {
                error = "No hay servicio seleccionado para eliminar.";
                return;
            }
            var http = HttpClientFactory.CreateClient("API");
            
            await http.DeleteAsync($"api/Service/Eliminar/{serviceToDelete.Id}");
            
            successMessage = "Servicio eliminado exitosamente.";
            
            // Recargar la lista de servicios
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            error = $"Error al eliminar el servicio: {ex.Message}";
            Console.WriteLine(error);
        }
        finally
        {
            serviceDeleteModal?.Hide();
        }
    }
    
    private IEnumerable<Service> GetPaginatedServices()
    {
        return filteredServices
            .Skip((_paginationState.CurrentPage - 1) * _paginationState.PageSize)
            .Take(_paginationState.PageSize);
    }

    private Task<GridDataProviderResult<Service>> ServicesDataProvider(GridDataProviderRequest<Service> request)
    {
        // Aplicar filtrado cliente según los controles existentes
        IEnumerable<Service> baseQuery = filteredServices;
        var result = request.ApplyTo(baseQuery);
        return Task.FromResult(result);
    }
    
    private void FilterServices()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredServices = Services;
        }
        else
        {
            if (string.IsNullOrEmpty(filterOption))
            {
                // Buscar en todos los campos
                filteredServices = Services.Where(s => 
                    (s.Nombre != null && s.Nombre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                    (s.Apellido != null && s.Apellido.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                    (s.Equipo != null && s.Equipo.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                    (s.Telefono != null && s.Telefono.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                ).ToList();
            }
            else
            {
                // Buscar solo en el campo seleccionado
                filteredServices = Services.Where(s => 
                    (filterOption == "nombre" && s.Nombre != null && s.Nombre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                    (filterOption == "apellido" && s.Apellido != null && s.Apellido.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                    (filterOption == "equipo" && s.Equipo != null && s.Equipo.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                    (filterOption == "telefono" && s.Telefono != null && s.Telefono.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                ).ToList();
            }
        }
        
        _paginationState.CurrentPage = 1;
        _paginationState.TotalItems = filteredServices.Count;
        StateHasChanged();
    }
    
    private void ChangePage(int page)
    {
        if (_paginationState.CanNavigateToPage(page))
        {
            _paginationState.CurrentPage = page;
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            error = null;
            
            var http = HttpClientFactory.CreateClient("API");
            var response = await http.GetAsync("api/Service/Listado");
            
            if (response.IsSuccessStatusCode)
            {
                Services = await response.Content.ReadFromJsonAsync<List<Service>>() ?? new List<Service>();
                filteredServices = Services;
                _paginationState.TotalItems = filteredServices.Count;
            }
            else
            {
                error = $"Error al cargar los servicios: {response.StatusCode}";
                Console.WriteLine(error);
                Services = new List<Service>();
                filteredServices = new List<Service>();
            }
        }
        catch (Exception ex)
        {
            error = $"Error al cargar los servicios: {ex.Message}";
            Console.WriteLine($"Excepción detallada: {ex}");
            Services = new List<Service>();
            filteredServices = new List<Service>();
        }
        finally
        {
            loading = false;
        }
    }
    
     private async Task SaveService(Service service)
    {
        try
        {
            var http = HttpClientFactory.CreateClient("API");
            
            if (service.Id == 0)
            {
                // Crear nuevo servicio
                await http.PostAsJsonAsync("api/Service/Crear", service);
                successMessage = "Servicio creado exitosamente.";
            }
            else
            {
                // Actualizar servicio existente
                await http.PutAsJsonAsync($"api/Service/Actualizar/{service.Id}", service);
                successMessage = "Servicio actualizado exitosamente.";
            }
            
            // Recargar la lista de servicios
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            error = $"Error al guardar el servicio: {ex.Message}";
            Console.WriteLine(error);
        }
    }  
    
   
    
    private void OpenCreateModal()
    {
        serviceCreateEditModal?.Show("Crear Nuevo Servicio", new Service
        {
            Id = 0,
            Nombre = "",
            Apellido = "",
            Equipo = "",
            Diagnostico = "",
            Telefono = "",
            Valor = 0,
            Seña = 0,
            FechaIngreso = DateTime.Today
        });
    }

    private void OpenEditModal(Service service)
    {
        serviceCreateEditModal?.Show("Editar Servicio", new Service
        {
            Id = service.Id,
            Nombre = service.Nombre,
            Apellido = service.Apellido,
            Equipo = service.Equipo,
            Diagnostico = service.Diagnostico,
            Telefono = service.Telefono,
            Valor = service.Valor,
            Seña = service.Seña,
            FechaIngreso = service.FechaIngreso
        });
    }

    private void CloseCreateEditModal()
    {
        StateHasChanged();
    }
    

    private void ShowDeleteConfirm(Service service)
    {
        serviceToDelete = service;
        serviceDeleteModal?.Show();
    }

    private void CloseDeleteModal()
    { 
        StateHasChanged();
    }
}